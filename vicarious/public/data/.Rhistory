ylab(NULL) +
labs(tag = "local user") +
geom_vline(xintercept=c(0.5,1.5,2.5,3.5,4.5,5.5,6.5),color="#BABABA")+
annotation_custom(grid::linesGrob(y = c(0,0), gp = grid::gpar(lwd=3))) +
theme(
axis.title.x=element_blank(),
axis.title.y=element_text(face = "bold"),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.tag = element_text(angle = 90, vjust = 1, size=fontsize),
plot.tag.position = c(1, .7),
plot.margin = unit(c(0.0, .025, 0, 0), "null"),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
legend.position="bottom",
legend.direction = "horizontal",
legend.justification = c("center", "top"),
legend.key.size = unit(.8, "cm"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_blank())
# Create a table to show on the plot
my_table <- data.frame(
ID = c("Q1", "Q2", "Q3", "Q4", "Q5", "Q6"),
Questions = c(
"Which condition did you find easiest to use?",
"Which condition did you find most helpful for understanding the task environment?",
"Which condition did you find most helpful for understanding your partner's instructions?",
"Which condition did you find most effective for communicating with your partner?",
"Which condition did you find most helpful for completing the task?",
"Which condition did you prefer the most?"
)
)
mytheme <- gridExtra::ttheme_default(
core = list(fg_params=list(cex = 1.2)),
colhead = list(fg_params=list(cex = 1.0)),
rowhead = list(fg_params=list(cex = 1.0)))
my_table_grob <- gridExtra::tableGrob(my_table, cols = NULL, rows=NULL, theme = mytheme)
for (i in 1:6) {
my_table_grob$grobs[i][[1]][["gp"]] <- gpar(fontsize=15) #$, fontface="normal"
}
grid.draw(my_table_grob)
# my_table_grob <- tableGrob(my_table, cols = NULL, rows=NULL)
final_plot <- arrangeGrob(plotvr, plotar, my_table_grob, nrow = 3, heights = c(.3, .4, .3))
# plot_grid(plotvr, plotar, my_table_grob, finalalign = "v", nrow = 3, rel_heights = c(1/2, 1/2, 1/6))
# Display the plot
grid.arrange(final_plot)
ggsave("out/preference1.pdf", final_plot, width = 8, height = 6, dpi = 1000)
# Load required packages
library(ggplot2)
library(gridExtra)
library(cowplot)
library(grid)
df_pref_vr=read.csv('csv/preference_vr.csv', sep=",")
df_pref_ar=read.csv('csv/preference_ar.csv', sep=",")
custom_order <- c("AS", "GS", "MS", "NS")
custom_order2 <- c("Q6", "Q5", "Q4", "Q3", "Q2", "Q1")
custom_order <- rev(custom_order)
custom_order2 <- rev(custom_order2)
df_pref_vr$cond <- factor(df_melt$cond, levels = custom_order)
df_pref_vr$qus <- factor(df_melt$qus, levels = custom_order2)
df_pref_ar$cond <- factor(df_melt$cond, levels = custom_order)
df_pref_ar$qus <- factor(df_melt$qus, levels = custom_order2)
# Create the first plot
plotvr <- ggplot(df_pref_vr, aes(x = qus, y = value, fill = cond)) +
geom_bar(stat = "identity", position = position_dodge(1.15*dodge), width = 1*dodge, color = "black") +
geom_text(aes(label = value), position = position_dodge(width = 1.15*dodge), vjust = -0.5, size = 5) +
scale_fill_manual(values = coloring) +
theme_bw() +
ylim(0, 15) +
ylab(NULL) +
labs(tag = "remote user") +
geom_vline(xintercept=c(0.5,1.5,2.5,3.5,4.5,5.5,6.5),color="#BABABA")+
annotation_custom(grid::linesGrob(y = c(0,0), gp = grid::gpar(lwd=3))) +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_text(face = "bold", size = fontsize),
axis.text.x = element_blank(),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.background = element_blank(),
plot.tag = element_text(angle = 90, vjust = 1, size=fontsize),
plot.tag.position = c(1, .5),
plot.margin = unit(c(0.0, .025, .0, 0), "null"),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
legend.position="null",
legend.direction = "horizontal",
legend.justification = c("center", "top"),
legend.key.size = unit(1, "cm"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_blank())
# Create the second plot
plotar <- ggplot(df_pref_ar, aes(x = qus, y = value, fill = cond)) +
geom_bar(stat = "identity", position = position_dodge(1.15*dodge), width = 1*dodge, color = "black") +
geom_text(aes(label = value), position = position_dodge(width = 1.15*dodge), vjust = -0.5, size = 5) +
scale_fill_manual(values = coloring) +
theme_bw() +
ylim(0, 15) +
ylab(NULL) +
labs(tag = "local user") +
geom_vline(xintercept=c(0.5,1.5,2.5,3.5,4.5,5.5,6.5),color="#BABABA")+
annotation_custom(grid::linesGrob(y = c(0,0), gp = grid::gpar(lwd=3))) +
theme(
axis.title.x=element_blank(),
axis.title.y=element_text(face = "bold"),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.tag = element_text(angle = 90, vjust = 1, size=fontsize),
plot.tag.position = c(1, .7),
plot.margin = unit(c(0.0, .025, 0, 0), "null"),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
legend.position="bottom",
legend.direction = "horizontal",
legend.justification = c("center", "top"),
legend.key.size = unit(.8, "cm"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_blank())
# Create a table to show on the plot
my_table <- data.frame(
ID = c("Q1", "Q2", "Q3", "Q4", "Q5", "Q6"),
Questions = c(
"Which condition did you find easiest to use?",
"Which condition did you find most helpful for understanding the task environment?",
"Which condition did you find most helpful for understanding your partner's instructions?",
"Which condition did you find most effective for communicating with your partner?",
"Which condition did you find most helpful for completing the task?",
"Which condition did you prefer the most?"
)
)
mytheme <- gridExtra::ttheme_default(
core = list(fg_params=list(cex = 1.2)),
colhead = list(fg_params=list(cex = 1.0)),
rowhead = list(fg_params=list(cex = 1.0)))
my_table_grob <- gridExtra::tableGrob(my_table, cols = NULL, rows=NULL, theme = mytheme)
for (i in 1:6) {
my_table_grob$grobs[i][[1]][["gp"]] <- gpar(fontsize=15) #$, fontface="normal"
}
grid.draw(my_table_grob)
# my_table_grob <- tableGrob(my_table, cols = NULL, rows=NULL)
final_plot <- arrangeGrob(plotvr, plotar, my_table_grob, nrow = 3, heights = c(.3, .4, .3))
# plot_grid(plotvr, plotar, my_table_grob, finalalign = "v", nrow = 3, rel_heights = c(1/2, 1/2, 1/6))
# Display the plot
grid.arrange(final_plot)
ggsave("out/preference1.pdf", final_plot, width = 8, height = 6, dpi = 1000)
# Load required packages
library(ggplot2)
library(gridExtra)
library(cowplot)
library(grid)
df_pref_vr=read.csv('csv/preference_vr.csv', sep=",")
df_pref_ar=read.csv('csv/preference_ar.csv', sep=",")
custom_order <- c("AS", "GS", "MS", "NS")
custom_order2 <- c("Q6", "Q5", "Q4", "Q3", "Q2", "Q1")
custom_order <- rev(custom_order)
custom_order2 <- rev(custom_order2)
df_pref_vr$cond <- factor(df_melt$cond, levels = custom_order)
df_pref_vr$qus <- factor(df_melt$qus, levels = custom_order2)
df_pref_ar$cond <- factor(df_melt$cond, levels = custom_order)
df_pref_ar$qus <- factor(df_melt$qus, levels = custom_order2)
# Create the first plot
plotvr <- ggplot(df_pref_vr, aes(x = qus, y = value, fill = cond)) +
geom_bar(stat = "identity", position = position_dodge(1.15*dodge), width = 1*dodge, color = "black") +
geom_text(aes(label = value), position = position_dodge(width = 1.15*dodge), vjust = -0.5, size = 5) +
scale_fill_manual(values = coloring) +
theme_bw() +
ylim(0, 15) +
ylab(NULL) +
labs(tag = "remote user") +
geom_vline(xintercept=c(0.5,1.5,2.5,3.5,4.5,5.5,6.5),color="#F2F2F2")+
annotation_custom(grid::linesGrob(y = c(0,0), gp = grid::gpar(lwd=3))) +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_text(face = "bold", size = fontsize),
axis.text.x = element_blank(),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.background = element_blank(),
plot.tag = element_text(angle = 90, vjust = 1, size=fontsize),
plot.tag.position = c(1, .5),
plot.margin = unit(c(0.0, .025, .0, 0), "null"),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
legend.position="null",
legend.direction = "horizontal",
legend.justification = c("center", "top"),
legend.key.size = unit(1, "cm"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_blank())
# Create the second plot
plotar <- ggplot(df_pref_ar, aes(x = qus, y = value, fill = cond)) +
geom_bar(stat = "identity", position = position_dodge(1.15*dodge), width = 1*dodge, color = "black") +
geom_text(aes(label = value), position = position_dodge(width = 1.15*dodge), vjust = -0.5, size = 5) +
scale_fill_manual(values = coloring) +
theme_bw() +
ylim(0, 15) +
ylab(NULL) +
labs(tag = "local user") +
geom_vline(xintercept=c(0.5,1.5,2.5,3.5,4.5,5.5,6.5),color="#F2F2F2")+
annotation_custom(grid::linesGrob(y = c(0,0), gp = grid::gpar(lwd=3))) +
theme(
axis.title.x=element_blank(),
axis.title.y=element_text(face = "bold"),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.tag = element_text(angle = 90, vjust = 1, size=fontsize),
plot.tag.position = c(1, .7),
plot.margin = unit(c(0.0, .025, 0, 0), "null"),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
legend.position="bottom",
legend.direction = "horizontal",
legend.justification = c("center", "top"),
legend.key.size = unit(.8, "cm"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_blank())
# Create a table to show on the plot
my_table <- data.frame(
ID = c("Q1", "Q2", "Q3", "Q4", "Q5", "Q6"),
Questions = c(
"Which condition did you find easiest to use?",
"Which condition did you find most helpful for understanding the task environment?",
"Which condition did you find most helpful for understanding your partner's instructions?",
"Which condition did you find most effective for communicating with your partner?",
"Which condition did you find most helpful for completing the task?",
"Which condition did you prefer the most?"
)
)
mytheme <- gridExtra::ttheme_default(
core = list(fg_params=list(cex = 1.2)),
colhead = list(fg_params=list(cex = 1.0)),
rowhead = list(fg_params=list(cex = 1.0)))
my_table_grob <- gridExtra::tableGrob(my_table, cols = NULL, rows=NULL, theme = mytheme)
for (i in 1:6) {
my_table_grob$grobs[i][[1]][["gp"]] <- gpar(fontsize=15) #$, fontface="normal"
}
grid.draw(my_table_grob)
# my_table_grob <- tableGrob(my_table, cols = NULL, rows=NULL)
final_plot <- arrangeGrob(plotvr, plotar, my_table_grob, nrow = 3, heights = c(.3, .4, .3))
# plot_grid(plotvr, plotar, my_table_grob, finalalign = "v", nrow = 3, rel_heights = c(1/2, 1/2, 1/6))
# Display the plot
grid.arrange(final_plot)
ggsave("out/preference1.pdf", final_plot, width = 8, height = 6, dpi = 1000)
df=read.csv('csv/pref.chi.csv', sep=",")
print_chi_test <- function(qus_no, test_results) {
cat(qus_no, ". Chi-square test statistic:", test_results$test_statistic, "\n")
cat("p-value:", test_results$p_value, "\n")
cat("residual:", test_results$residual, "\n")
cat("Significant categories contributing to the chi-square result:", test_results$significant_cat, "\n")
cat("---------------------------------\n")
}
df=read.csv('csv/pref.chi.csv', sep=",")
print_chi_test <- function(qus_no, test_results) {
cat(qus_no, ". Chi-square test statistic:", test_results$test_statistic, "\n")
cat("p-value:", test_results$p_value, "\n")
cat("residual:", test_results$residual, "\n")
cat("Significant categories contributing to the chi-square result:", test_results$significant_cat, "\n")
cat("---------------------------------\n")
}
chi_square_test <- function(observed) {
expected <- rep(1 / length(observed), length(observed)) # 0.25 0.25 0.25 0.25 (equal distribution)
# Perform chi-square goodness-of-fit test
result <- chisq.test(observed, p = expected)
residuals <- residuals(result)
significant_categories <- which(abs(residuals) > 1.96)
test_statistic <- result$statistic
p_value <- result$p.value
results <- list(
test_statistic = test_statistic,
p_value = p_value,
residual = abs(residuals),
significant_cat = significant_categories
)
return(results)
}
Q1 <- df[1:2, ]
Q1[, c("NS", "MS", "GS", "AS")] <- lapply(Q1[, c("NS", "MS", "GS", "AS")], as.numeric)
Q1sums <- colSums(Q1[, c("NS", "MS", "GS", "AS")])
test_results <- chi_square_test(Q1sums)
print_chi_test("Q1", test_results)
Q2 <- df[4:5, ]
Q2[, c("NS", "MS", "GS", "AS")] <- lapply(Q2[, c("NS", "MS", "GS", "AS")], as.numeric)
Q2sums <- colSums(Q2[, c("NS", "MS", "GS", "AS")])
test_results <- chi_square_test(Q2sums)
print_chi_test("Q2", test_results)
Q3 <- df[7:8, ]
Q3[, c("NS", "MS", "GS", "AS")] <- lapply(Q3[, c("NS", "MS", "GS", "AS")], as.numeric)
Q3sums <- colSums(Q3[, c("NS", "MS", "GS", "AS")])
test_results <- chi_square_test(Q3sums)
print_chi_test("Q3", test_results)
Q4 <- df[10:11, ]
Q4[, c("NS", "MS", "GS", "AS")] <- lapply(Q4[, c("NS", "MS", "GS", "AS")], as.numeric)
Q4sums <- colSums(Q4[, c("NS", "MS", "GS", "AS")])
test_results <- chi_square_test(Q4sums)
print_chi_test("Q4", test_results)
Q5 <- df[13:14, ]
Q5[, c("NS", "MS", "GS", "AS")] <- lapply(Q5[, c("NS", "MS", "GS", "AS")], as.numeric)
Q5sums <- colSums(Q5[, c("NS", "MS", "GS", "AS")])
test_results <- chi_square_test(Q5sums)
print_chi_test("Q5", test_results)
Q6 <- df[16:17, ]
Q6[, c("NS", "MS", "GS", "AS")] <- lapply(Q6[, c("NS", "MS", "GS", "AS")], as.numeric)
Q6sums <- colSums(Q6[, c("NS", "MS", "GS", "AS")])
test_results <- chi_square_test(Q6sums)
print_chi_test("Q6", test_results)
# library
library(ggplot2)
library(dplyr)
library(broom)
library(tidyr)
library(stats)
coloring = c("#ffbd67", "#f6dbb8","#94d8e0","#537b7f")
fontsize = 14
dodge = .75
# library
library(ggplot2)
library(dplyr)
library(broom)
library(tidyr)
library(stats)
coloring = c("#ffbd67", "#f6dbb8","#94d8e0","#537b7f")
fontsize = 14
dodge = .75
data=read.csv('csv/nasa_tlx.csv', sep=",")
condition_order <- c("NS", "MS", "GS", "AS")
param_order <- c("Mental", "Physical", "Temporal", "Performance", "Effort", "Frustration", "Overall")
df <- data %>%
gather(key = "conditions", value = "scores", NS:AS) %>%
mutate(conditions = factor(conditions, levels = condition_order)) %>%
mutate(params = factor(params, levels = param_order))
# Assuming df is your data frame
summary_df <- df %>%
filter(params == "Overall") %>%
group_by(conditions) %>%
summarise(min = min(scores),
lq = quantile(scores, 0.25),
hq = quantile(scores, 0.75),
max = max(scores),
mean = mean(scores),
median = median(scores),
sd = sd(scores))
# Print the summary
print(summary_df)
boxplot(scores ~ conditions, data = df,
main = "Boxplot Example",
xlab = "Category",
ylab = "Value")
# Calculate mean for each category
means <- aggregate(scores ~ conditions, data = df, mean)
# Add mean points
points(x = as.numeric(means$conditions), y = means$scores, pch = 4)
# stat.test <- df %>%
#   t_test(sus_score~conditions, p.adjust.method = 'bonferroni') %>%
#   add_significance("p") %>%
#   add_xy_position(x = "conditions")
tukey <- df %>%
tukey_hsd(time ~ conditions) %>%
add_significance() %>%
add_xy_position()
data=read.csv('csv/TaskCompletionTime.csv', sep=",")
df <- data %>%
pivot_longer(
cols = starts_with("task"),
names_to = "task",
values_to = "time"
) %>%
arrange(conditions, task)
# Assuming df is your data frame
summary_df <- df %>%
group_by(conditions) %>%
summarise(min = min(time),
max = max(time),
mean = mean(time),
median = median(time),
sd = sd(time))
# Print the summary
print(summary_df)
condition_order <- c("NS", "MS", "GS", "AS")
df$conditions <- factor(df$conditions, levels = condition_order)
boxplot(time ~ conditions, data = df,
main = "Boxplot Example",
xlab = "Category",
ylab = "Value")
# Calculate mean for each category
means <- aggregate(time ~ conditions, data = df, mean)
# Add mean points
points(x = as.numeric(means$conditions), y = means$time, pch = 4)
model <- aov_4(time ~ conditions + (conditions|group), type= 3, data = df)
data=read.csv('csv/nasa_tlx.csv', sep=",")
condition_order <- c("NS", "MS", "GS", "AS")
df <- data %>%
gather(key = "conditions", value = "scores", NS:AS) %>%
mutate(conditions = factor(conditions, levels = condition_order))
result<-shapiro.test(df$scores)
print(paste("Test Statistic (W):", result$statistic, "p=", result$p.value))
print(if (result$p.value > 0.05) "The data follows a normal distribution." else "The data does not follow a normal distribution.")
qqnorm(df$scores)
qqline(df$scores)
stat.test <- df %>%
group_by(params) %>%
wilcox_test(scores~conditions, p.adjust.method = 'BH') %>%
add_significance("p") %>%
add_xy_position(x = "params")
data=read.csv('csv/TaskCompletionTime.csv', sep=",")
df <- data %>%
pivot_longer(
cols = starts_with("task"),
names_to = "task",
values_to = "time"
) %>%
arrange(conditions, task)
# Assuming df is your data frame
summary_df <- df %>%
group_by(conditions) %>%
summarise(min = min(time),
max = max(time),
mean = mean(time),
median = median(time),
sd = sd(time))
# Print the summary
print(summary_df)
condition_order <- c("NS", "MS", "GS", "AS")
df$conditions <- factor(df$conditions, levels = condition_order)
boxplot(time ~ conditions, data = df,
main = "Boxplot Example",
xlab = "Category",
ylab = "Value")
# Calculate mean for each category
means <- aggregate(time ~ conditions, data = df, mean)
# Add mean points
points(x = as.numeric(means$conditions), y = means$time, pch = 4)
# One-Way ANOVA
model <- aov(time ~ task, data = completion_times)
bartlett_test <- bartlett.test(time ~ task, data = completion_times)
# Create a string
my_string <- paste(
"Bartlett's K-squared = ", bartlett_test$statistic,
", df=", bartlett_test$parameter,
", p-value =", bartlett_test$p.value,
", Sigf = ", bartlett_test$p.value < 0.05,
", F-stats: ", capture.output(cat("F(", df1, ", ", df2, ") = ", F_val, "\n")))
data <- data.frame(
category = c("G1", "G2", "G3", "G4", "G5", "G6", "G7", "G8", "G9"),
value1 = c(20, 30, 15),
value2 = c(10, 25, 20),
value3 = c(15, 12, 18),
value4 = c(20, 30, 15),
value5 = c(10, 25, 20),
value6 = c(15, 12, 18),
value7 = c(20, 30, 15)
)
# Convert data from wide to long format
data_long <- tidyr::pivot_longer(data, cols = starts_with("value"), names_to = "variable", values_to = "value")
p <- ggplot(data_long, aes(x = category, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Category", y = "Value") +
theme_minimal() +
scale_fill_brewer(palette = "Dark2") +
coord_flip()
# Create a second data frame with additional values
additional_data <- data.frame(
category = c("G1", "G2", "G3", "G4", "G5", "G6", "G7", "G8", "G9"),
additional_value = c(5, 10, 3)
)
# Convert the additional data to long format
additional_data_long <- tidyr::pivot_longer(additional_data,
cols = starts_with("additional_value"),
names_to = "variable",
values_to = "value")
# Add the second bar plot on top of the first one
p <- p +
geom_bar(data = additional_data_long, aes(x = category, y = value, fill = variable),
stat = "identity", position = "stack", width = 0.5)
# Display the plot
p
ggsave("out/ActivityVis.pdf", width = 8, height = 3, dpi = 1000)
# stat.test <- df %>%
#   t_test(sus_score~conditions, p.adjust.method = 'bonferroni') %>%
#   add_significance("p") %>%
#   add_xy_position(x = "conditions")
tukey <- df %>%
tukey_hsd(time ~ conditions) %>%
add_significance() %>%
add_xy_position()
