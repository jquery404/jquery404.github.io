legend.justification = c("right", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_rect(fill = "white", color = "black", size = 1))
spatial_plt
# grouped box plot
spatial_plt <- ggplot(data = spatial_data, mapping = aes(x = params, y = score, fill = vrar)) +
stat_boxplot(geom = "errorbar", width=.2, position=position_dodge(.75)) +
geom_boxplot() +
geom_boxplot(aes(color=vrar), coef = 0, outlier.alpha = 0, show.legend = F) +
# geom_point(position=position_jitterdodge(dodge.width=0.9)) +
#stat_compare_means(method="t.test") +
stat_summary(fun="mean", geom="point", shape=1, size=3, position=position_dodge(width=0.75), color="black") +
stat_summary(geom = "crossbar", width=0.65, fatten=0, color="black", fun.data = function(x){c(y=median(x), ymin=median(x), ymax=median(x))}, position=position_dodge(width=0.75)) +
scale_fill_manual(name= "vrar", values = bar_color)+
scale_color_manual(name = "vrar", values = bar_color) +
scale_y_continuous(minor_breaks = seq(0, 7, 1), breaks = seq(1, 7.1, by=1), limits=c(1,7.1)) +
theme_bw() +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
plot.background = element_blank(),
plot.margin = unit(c(0.005, .025, 0, 0), "null"),
panel.border = element_blank(),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
legend.position = c(.95, 0.2),
legend.justification = c("right", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_rect(fill = "white", color = "black", size = 1))
spatial_plt
# grouped box plot
social_plt <- ggplot(data = social_data, mapping = aes(x = params, y = score, fill = vrar)) +
stat_boxplot(geom = "errorbar", width=.2, position=position_dodge(.75)) +
geom_boxplot(aes(color=vrar), coef = 0, outlier.alpha = 0, show.legend = F) +
# geom_point(position=position_jitterdodge(dodge.width=0.9)) +
stat_compare_means(method="t.test") +
geom_segment(data=social_data, aes(x=params, xend=params, y=3.5, yend=3.5), colour="red", size=2, inherit.aes = F)  +
stat_summary(fun="mean", geom="point", shape=1, size=3, position=position_dodge(width=0.75), color="black") +
stat_summary(geom = "crossbar", width=0.65, fatten=0, color="black", fun.data = function(x){c(y=median(x), ymin=median(x), ymax=median(x))}, position=position_dodge(width=0.75)) +
scale_fill_manual(name= "vrar", values = bar_color) +
scale_color_manual(name = "vrar", values = bar_color) +
scale_y_continuous(minor_breaks = seq(0, 7, 1), breaks = seq(1, 7.1, by=1), limits=c(1,7.1)) +
theme_bw() +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.background = element_blank(),
plot.margin = unit(c(0.005, .025, 0, 0), "null"),
panel.border = element_blank(),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
#panel.grid.major = element_blank(),
legend.position = c(.95, 0.2),
legend.justification = c("right", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_rect(fill = "white", color = "black", size = 1))
social_plt
# create a data frame
spatial_data=read.csv('csv/spatial presence.csv', sep=",")
attach(spatial_data)
# grouped box plot
spatial_plt <- ggplot(data = spatial_data, mapping = aes(x = params, y = score, fill = vrar)) +
stat_boxplot(geom = "errorbar", width=.2, position=position_dodge(.75)) +
geom_boxplot() +
geom_boxplot(aes(color=vrar), coef = 0, outlier.alpha = 0, show.legend = F) +
# geom_point(position=position_jitterdodge(dodge.width=0.9)) +
#stat_compare_means(method="t.test") +
stat_summary(fun="mean", geom="point", shape=1, size=3, position=position_dodge(width=0.75), color="black") +
stat_summary(geom = "crossbar", width=0.65, fatten=0, color="black", fun.data = function(x){c(y=median(x), ymin=median(x), ymax=median(x))}, position=position_dodge(width=0.75)) +
scale_fill_manual(name= "vrar", values = bar_color)+
scale_color_manual(name = "vrar", values = bar_color) +
scale_y_continuous(minor_breaks = seq(0, 7, 1), breaks = seq(1, 7.1, by=1), limits=c(1,7.1)) +
theme_bw() +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
plot.background = element_blank(),
plot.margin = unit(c(0.005, .025, 0, 0), "null"),
panel.border = element_blank(),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
legend.position = c(.95, 0.2),
legend.justification = c("right", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_rect(fill = "white", color = "black", size = 1))
spatial_plt
data=read.csv('csv/usability.csv', sep=",")
pref_color = c("#90d7de", "#ffbd66","#ffebd0")
attach(gfg)
cleandata <- gfg %>%
group_by(params, mode) %>%
summarise(mean_score = mean(score),
counts = n(),
sd_score = sd(score),
se_score = (sd_score/sqrt(sd_score))
)
# grouped box plot
level_order <- c('remote user',	'local user')
ggplot(data=cleandata, mapping= aes(x=factor(params, level = level_order), y=mean_score, fill=mode)) +
geom_col(width=.5, position=position_dodge(.6)) +
geom_errorbar(aes(ymin=mean_score-se_score, ymax=mean_score+se_score), width=.2, position=position_dodge(.6))+
scale_fill_manual(values = pref_color) +
scale_y_continuous(expand = c(0, 0)) +
coord_flip(ylim = c(0, 50)) +
guides(fill=guide_legend(title="")) +
theme_bw() +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.background = element_blank(),
plot.margin = unit(c(0.005, .025, 0, 0), "null"),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
legend.position = c(.95, 0.3),
legend.justification = c("right", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_rect(fill = "white", color = "black", size = 1))
data=read.csv('csv/usability.csv', sep=",")
View(data)
# grouped box plot
level_order <- c('remote user',	'local user')
ggplot(data=cleandata, mapping= aes(x=factor(params, level = level_order), y=mean_score, fill=mode)) +
geom_col(width=.5, position=position_dodge(.6)) +
geom_errorbar(aes(ymin=mean_score-se_score, ymax=mean_score+se_score), width=.2, position=position_dodge(.6))+
scale_fill_manual(values = pref_color) +
scale_y_continuous(expand = c(0, 0)) +
coord_flip(ylim = c(0, 50)) +
guides(fill=guide_legend(title="")) +
theme_bw() +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.background = element_blank(),
plot.margin = unit(c(0.005, .025, 0, 0), "null"),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
legend.position = c(.95, 0.3),
legend.justification = c("right", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_rect(fill = "white", color = "black", size = 1))
View(cleandata)
usability_data=read.csv('csv/usability.csv', sep=",")
pref_color = c("#90d7de", "#ffbd66","#ffebd0")
attach(usability_data)
cleandata <- usability_data %>%
group_by(params, mode) %>%
summarise(mean_score = mean(score),
counts = n(),
sd_score = sd(score),
se_score = (sd_score/sqrt(sd_score))
)
# grouped box plot
level_order <- c('remote user',	'local user')
ggplot(data=cleandata, mapping= aes(x=factor(params, level = level_order), y=mean_score, fill=mode)) +
geom_col(width=.5, position=position_dodge(.6)) +
geom_errorbar(aes(ymin=mean_score-se_score, ymax=mean_score+se_score), width=.2, position=position_dodge(.6))+
scale_fill_manual(values = pref_color) +
scale_y_continuous(expand = c(0, 0)) +
coord_flip(ylim = c(0, 50)) +
guides(fill=guide_legend(title="")) +
theme_bw() +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.background = element_blank(),
plot.margin = unit(c(0.005, .025, 0, 0), "null"),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
legend.position = c(.95, 0.3),
legend.justification = c("right", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_rect(fill = "white", color = "black", size = 1))
usability_data=read.csv('csv/usability.csv', sep=",")
pref_color = c("#90d7de", "#ffbd66","#ffebd0")
cleandata <- usability_data %>%
group_by(params, mode) %>%
summarise(mean_score = mean(score),
counts = n(),
sd_score = sd(score),
se_score = (sd_score/sqrt(sd_score))
)
# grouped box plot
level_order <- c('remote user',	'local user')
ggplot(data=cleandata, mapping= aes(x=factor(params, level = level_order), y=mean_score, fill=mode)) +
geom_col(width=.5, position=position_dodge(.6)) +
geom_errorbar(aes(ymin=mean_score-se_score, ymax=mean_score+se_score), width=.2, position=position_dodge(.6))+
scale_fill_manual(values = pref_color) +
scale_y_continuous(expand = c(0, 0)) +
coord_flip(ylim = c(0, 50)) +
guides(fill=guide_legend(title="")) +
theme_bw() +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.background = element_blank(),
plot.margin = unit(c(0.005, .025, 0, 0), "null"),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
legend.position = c(.95, 0.3),
legend.justification = c("right", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_rect(fill = "white", color = "black", size = 1))
ggplot(data=cleandata, mapping= aes(x=factor(params, level = level_order), y=mean_score, fill=mode)) +
geom_col(width=.5, position=position_dodge(.6)) +
geom_errorbar(aes(ymin=mean_score-se_score, ymax=mean_score+se_score), width=.2, position=position_dodge(.6))+
scale_fill_manual(values = pref_color) +
scale_y_continuous(expand = c(0, 0)) +
coord_flip(ylim = c(0, 100)) +
guides(fill=guide_legend(title="")) +
theme_bw() +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.background = element_blank(),
plot.margin = unit(c(0.005, .025, 0, 0), "null"),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
legend.position = c(.95, 0.3),
legend.justification = c("right", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_rect(fill = "white", color = "black", size = 1))
# library
library(ggplot2)
library(ggpubr)
library(dplyr)
library(likert)
coloring = c("#ffbd66", "#ffebd0","#d7f0f2","#90d7de","#52c2cc","#b56576","#6d597a","#355070")
fontsize = 14
dodge = .35
usability_data=read.csv('csv/usability.csv', sep=",")
pref_color = c("#90d7de", "#ffbd66","#ffebd0")
attach(usability_data)
cleandata <- usability_data %>%
group_by(params, mode) %>%
summarise(mean_score = mean(score),
counts = n(),
sd_score = sd(score),
se_score = (sd_score/sqrt(sd_score))
)
# grouped box plot
level_order <- c('remote user',	'local user')
ggplot(data=cleandata, mapping= aes(x=factor(params, level = level_order), y=mean_score, fill=mode)) +
geom_col(width=.5, position=position_dodge(.6)) +
geom_errorbar(aes(ymin=mean_score-se_score, ymax=mean_score+se_score), width=.2, position=position_dodge(.6))+
scale_fill_manual(values = pref_color) +
scale_y_continuous(expand = c(0, 0)) +
coord_flip(ylim = c(0, 100)) +
guides(fill=guide_legend(title="")) +
theme_bw() +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.background = element_blank(),
plot.margin = unit(c(0.005, .025, 0, 0), "null"),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
legend.position = c(.95, 0.3),
legend.justification = c("right", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_rect(fill = "white", color = "black", size = 1))
View(cleandata)
View(usability_data)
friedman.test(y=usability_data$score, groups=usability_data$mode, blocks=usability_data$params)
friedman.test(y=usability_data$score, groups=usability_data$mode, blocks=usability_data$params)
friedman.test(y=cleandata$mean_score, groups=cleandata$mode, blocks=cleandata$params)
pairwise.wilcox.test(cleandata$mean_score, cleandata$mode, p.adj = "bonf")
gfg=read.csv('csv/nasa-tlx.csv', sep=",")
View(gfg)
pref_color = c("#90d7de", "#ffbd66","#ffebd0")
attach(gfg)
cleandata <- gfg %>%
group_by(params, mode) %>%
summarise(mean_score = mean(score),
counts = n(),
sd_score = sd(score),
se_score = (sd_score/sqrt(sd_score))
)
# grouped box plot
level_order <- c('remote user',	'local user',	'overall')
ggplot(data=cleandata, mapping= aes(x=factor(params, level = level_order), y=mean_score, fill=mode)) +
geom_col(width=.5, position=position_dodge(.6)) +
geom_errorbar(aes(ymin=mean_score-se_score, ymax=mean_score+se_score), width=.2, position=position_dodge(.6))+
scale_fill_manual(values = pref_color) +
scale_y_continuous(expand = c(0, 0)) +
coord_flip(ylim = c(0, 50)) +
guides(fill=guide_legend(title="")) +
theme_bw() +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.background = element_blank(),
plot.margin = unit(c(0.005, .025, 0, 0), "null"),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
legend.position = c(.95, 0.3),
legend.justification = c("right", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_rect(fill = "white", color = "black", size = 1))
friedman.test(y=cleandata$mean_score, groups=cleandata$mode, blocks=cleandata$params)
pairwise.wilcox.test(cleandata$mean_score, cleandata$mode, p.adj = "bonf")
z <- pairwise.wilcox.test(cleandata$mean_score, cleandata$mode, p.adj = "bonf")
gfg=read.csv('csv/nasa-tlx.csv', sep=",")
pref_color = c("#90d7de", "#ffbd66","#ffebd0")
attach(gfg)
cleandata <- gfg %>%
group_by(params, mode) %>%
summarise(mean_score = mean(score),
counts = n(),
sd_score = sd(score),
se_score = (sd_score/sqrt(sd_score))
)
z <- pairwise.wilcox.test(cleandata$mean_score, cleandata$mode, p.adj = "bonf")
z
wilcox <- pairwise.wilcox.test(cleandata$mean_score, cleandata$mode, p.adj = "bonf")
wilcox
print(wilcox)
Ztest<- qnorm(wilcox$p.value/2)
print(Ztest)
print(abs(Zstat)/sqrt(20))
Zstat<-qnorm(wilcox$p.value/2)
print(abs(Zstat)/sqrt(20))
print(Zstats)
print(Zstat)
gfg=read.csv('csv/nasa-tlx.csv', sep=",")
pref_color = c("#90d7de", "#ffbd66","#ffebd0")
attach(gfg)
cleandata <- gfg %>%
group_by(params, mode) %>%
summarise(mean_score = mean(score),
counts = n(),
sd_score = sd(score),
se_score = (sd_score/sqrt(sd_score))
)
View(cleandata)
friedman.test(y=cleandata$mean_score, groups=cleandata$mode, blocks=cleandata$params)
wilcox <- pairwise.wilcox.test(cleandata$mean_score, cleandata$mode, p.adj = "bonf")
print(wilcox)
Zstat<-qnorm(wilcox$p.value/2)
print(Zstat)
print(abs(Zstat)/sqrt(20))
#######################################
# task completion
#######################################
data=read.csv('csv/timecompletion.csv', sep=",")
shapiro.test(data$time)
res.aov <- aov(data$time ~ data$tech, data = data)
summary(res.aov)
table(res.aov)
table(res.aov, "means")
model.tables(res.aov, "means")
data
task_1 = filter(data, tech == "automatic")
View(task_1)
task_1 = filter(data, task == "task1")
View(task_1)
#######################################
# task completion
#######################################
data=read.csv('csv/timecompletion.csv', sep=",")
task_1 = filter(data, task == "1")
View(task_1)
task_1 = filter(data, task == "1")
task_2 = filter(data, task == "2")
task_3 = filter(data, task == "3")
task_4 = filter(data, task == "4")
task_5 = filter(data, task == "5")
task_6 = filter(data, task == "6")
View(task_6)
shapiro.test(task_1$time)
shapiro.test(task_2$time)
#######################################
# task completion
#######################################
data=read.csv('csv/timecompletion.csv', sep=",")
task_1 = filter(data, task == "1")
shapiro.test(task_1$time)
res.aov <- aov(task_1$time ~ task_1$tech, data = task_1)
summary(res.aov)
table(shapiro.test(task_1$time))
summary(shapiro.test(task_1$time))
shapiro.test(task_1$time)
res.friedman <- friedman.test(task_1$time, task_1$tech, task_1$task)
res.friedman <- friedman.test(data$time, data$tech, data$task)
res.friedman <- friedman.test(y = data$time, groups = data$tech, blocks = data$task)
#######################################
# task completion
#######################################
data=read.csv('csv/timecompletion.csv', sep=",")
shapiro.test(data$time)
res.friedman <- friedman.test(y = data$time, groups = data$tech, blocks = data$task)
friedman.test(y = data$time, groups = data$tech, blocks = data$task)
View(data)
usability_data=read.csv('csv/usability.csv', sep=",")
pref_color = c("#90d7de", "#ffbd66","#ffebd0")
usability_data$mode <- factor(usability_data$mode, level = c("automatic", "suggestive", "manual"))
cleandata <- usability_data %>%
group_by(params, mode) %>%
summarise(mean_score = mean(score),
counts = n(),
sd_score = sd(score),
se_score = (sd_score/sqrt(sd_score))
)
friedman.test(y=cleandata$mean_score, groups=cleandata$mode, blocks=cleandata$params)
pairwise.wilcox.test(cleandata$mean_score, cleandata$mode, p.adj = "bonf")
friedman.test(y=cleandata$mean_score, groups=cleandata$mode, blocks=cleandata$params)
library(ggstatsplot)
install.packages("ggstatsplot")
rtlx_data=read.csv('csv/nasa-tlx.csv', sep=",")
pref_color = c("#90d7de", "#ffbd66","#ffebd0")
rtlx_data$mode <- factor(rtlx_data$mode, level = c("automatic", "suggestive", "manual"))
attach(rtlx_data)
cleandata <- rtlx_data %>%
group_by(params, mode) %>%
summarise(mean_score = mean(score),
counts = n(),
sd_score = sd(score),
se_score = (sd_score/sqrt(sd_score))
)
friedman.test(y=cleandata$mean_score, groups=cleandata$mode, blocks=cleandata$params)
+ report()
library(report)
library(ggstatsplot)
library(ggstatsplot)
install.packages("report")
library(report)
library(ggstatsplot)
friedman.test(y=cleandata$mean_score, groups=cleandata$mode, blocks=cleandata$params)
friedman.test(y=cleandata$mean_score, groups=cleandata$mode, blocks=cleandata$params) %>%
+ report()
friedman.test(y=cleandata$mean_score, groups=cleandata$mode, blocks=cleandata$params) %>%
+ report()
f = friedman.test(y=cleandata$mean_score, groups=cleandata$mode, blocks=cleandata$params)
report(f)
f <= friedman.test(y=cleandata$mean_score, groups=cleandata$mode, blocks=cleandata$params)
f <- friedman.test(y=cleandata$mean_score, groups=cleandata$mode, blocks=cleandata$params)
report(f)
?report(f)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
#######################################
# task completion
#######################################
data=read.csv('csv/timecompletion2.csv', sep=",")
data=read.csv('csv/timecompletion3.csv', sep=",")
summary(aov(data$time~data$tech))
TukeyHSD(aov(data$time~as.factor(data$tech)))
