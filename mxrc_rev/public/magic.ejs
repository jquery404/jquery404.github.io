<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('_head'); %>
    <%- include('_head_ar'); %>
</head>
<body>

    <a-scene networked-scene="room: basic;debug: true;">
        <a-assets>

        <img id="grid" src="img/grid.png">
        <img id="sky" src="img/sky.jpg" />
        
        <%- include('_ass_model'); %>
        <%- include('_ass_player'); %>

        <template id="bullet-template">
            <a-entity>
              <a-sphere class="bullet" scale="0.1 0.1 0.1" color="#ff00000"></a-sphere>
            </a-entity>
        </template>

        <!-- /Templates -->
        </a-assets>

        <a-entity id="player"
            camera
            position="0 1.6 0"
            wasd-controls
            look-controls>
        </a-entity>

        <a-entity id="lhand" 
            laser-controls="hand: left"
            raycaster="objects: [gui-interactable]; lineColor: #7B98F7; far: 1000" 
            lego-model="legoTemplate:#lego-template" 
            networked="template:#hand-template;attachTemplateToLocal:false;">
            <a-entity id="controller-menu" opacity="0.8">
                <a-entity id="menu" position="0 .05 0" rotation="45 0 0" scale=".15 .15 .15" layout="type: box; plane: xy; columns: 3; margin: 2; align: center" rotation="0 0 0">
                    <a-cylinder src="img/ico_goal.jpg" class="menu-item clickable" position="-1 0 0" radius="0.5" height=".05" color="#FFC65D" data-target="#box"></a-cylinder>
                    <a-cylinder src="img/ico_paint.jpg" class="menu-item clickable" position="0 0 0" radius="0.5" height=".05" color="#FFC65D" data-target="#sphere"></a-cylinder>
                    <a-cylinder src="img/ico_shoot.jpg" class="menu-item clickable" position="1 0 0" radius="0.5" height=".05" color="#FFC65D" data-target="#cylinder"></a-cylinder>
                </a-entity>
            </a-entity>
        </a-entity>
  
        <a-entity  id="rhand" 
            painter 
            gun="bulletTemplate:#bullet-template" 
            laser-controls="hand: right" 
            raycaster="objects: [gui-interactable], .clickable; lineColor: black; far: 1000" 
            networked="template:#hand-template;attachTemplateToLocal:false;">
        </a-entity>

        <a-entity class="syncManager" sync-paint></a-entity>

        <!-- question -->
        <a-entity id="questionnaires" 
            visible= "false"    
            questions 
            geometry="primitive: plane; width: 6; height: 5" 
            material="color: #333333; shader: flat; transparent: false" 
            position="0 2 -6">
            
            <a-gui-flex-container
                flex-direction="column" 
                justify-content="center" 
                align-items="normal" 
                component-padding="0.1"
                opacity="0" 
                width="6" 
                height="1" 
                position="0 1 0">
                
                <a-gui-progressbar 
                    id="progressbar"
                    width="5" height="0.01"
                    progress=".2"
                    background-color="orange"
                    active-color="pink"
                    margin="0 0 2 0">
                </a-gui-progressbar>
                

            </a-gui-flex-container>

            <a-gui-flex-container
                flex-direction="row" 
                justify-content="center" 
                align-items="normal" 
                component-padding="0.1"
                opacity="0" 
                width="6" 
                height="2.5" 
                position="0 -1 0" 
                rotation="0 0 0">

                <a-gui-button 
                    id="btnPrev" 
                    margin="0 .5 0 0" 
                    width="1" height="0.5" 
                    onclick="btnQusPrev" 
                    value="Prev">
                </a-gui-button>

                <a-gui-slider
                    width="2.5" height="0.75"
                    margin="0 0 0 0"
                    background-color="orange"
                    active-color="pink"
                    hover-color="white"
                    border-color="black"
                    handle-color="yellow"	
                    onclick="adjustAnswer"
                    percent="0.0">
                </a-gui-slider>

                <a-gui-button 
                    id="btnNext" 
                    margin="0 0 0 .5" 
                    width="1" height="0.5" 
                    onclick="btnQusNext" 
                    value="Next">
                </a-gui-button>

            </a-gui-flex-container>

            <a-text id="quiz" value="loading..." align="center" width="4" scale="1 1 1" position="0 1.6 0"></a-text>

            <a-text id="answerLblX" width="2" position="-2 .2 0" wrap-count="20" value="..." align="center"></a-text>

            <a-text class="choice-1" width="5" position="-2 .5 0" value="1" align="center"></a-text>
            <a-text class="choice-2" width="5" position="-1.4 .5  0" value="2" align="center"></a-text>
            <a-text class="choice-3" width="5" position="-.7 .5 0" value="3" align="center"></a-text>
            <a-text class="choice-4" width="5" position="0 .5 0" value="4" align="center"></a-text>
            <a-text class="choice-5" width="5" position=".7 .5 0" value="5" align="center"></a-text>
            <a-text class="choice-6" width="5" position="1.4 .5 0" value="6" align="center"></a-text>
            <a-text class="choice-7" width="5" position="2 .5 0" value="7" align="center"></a-text>

            <a-text id="answerLblY" width="2" position="2 .2 0" wrap-count="20" value="..." align="center"></a-text>
        </a-entity>
        <a-entity position="0 0 0"
        geometry="primitive: plane; width: 10000; height: 10000;" rotation="-90 0 0"
        material="src: #grid; repeat: 10000 10000; transparent: true; metalness:0.6; roughness: 0.4; sphericalEnvMap: #sky;"></a-entity>

    </a-scene>


    <button onclick="toggleViewer()" type="button">Start viewer</button>

    <video class="host" playsinline autoplay muted></video>
    <pre></pre>
    
    <script src="scripts/rtcconfig.js"></script>
    <script src="scripts/jquery-latest.min.js"></script>
    <script>

        let localStream = null;
        let peers = {}
        let streams = []
        let videos = []

        // Get camera and microphone
        const videoElement = document.querySelector(".host");
        const video = document.querySelector("#video2");
        let canvas;
        let marginTop=0;
        let skyset=false;

        setTimeout(() => {
            getStream();
        }, 1000); 

        function getStream() {
            if (window.stream) {
            window.stream.getTracks().forEach(track => {
                track.stop();
            });
            }
            canvas = document.querySelector('canvas');
            canvas.getContext('2d');
            var stream = canvas.captureStream(25);
            videoElement.srcObject = stream;
            localStream = stream;
            init();
        }
        
    
        // .................................................
        // .............
        const socket = io.connect(window.location.origin);

        function init() {

            socket.emit('join room');

            socket.on('other joined', (socket_id) => {
                console.log(socket_id, ' joined')
                peers[socket_id] = addPeer(socket_id, true);
                localStream.getTracks().forEach(track => streams.push(peers[socket_id].addTrack(track, localStream)))
            })

            socket.on('offer', (socket_id, description) => {
                console.log(socket_id, ' make peer')
                peers[socket_id] = addPeer(socket_id, false)
            
                peers[socket_id].setRemoteDescription(description)
                    .then(() => { localStream.getTracks().forEach(track => streams.push(peers[socket_id].addTrack(track, localStream))); })
                    .then(() => peers[socket_id].createAnswer())
                    .then(sdp => peers[socket_id].setLocalDescription(sdp))
                    .then(() => {
                        console.log('received offer preparing ans for ', socket_id, peers[socket_id].localDescription.type)
                        socket.emit('answer', socket_id, peers[socket_id].localDescription);
                    });
            })

            socket.on('answer', (socket_id, description) => {
                console.log('received ans back from ', socket_id);
                peers[socket_id].setRemoteDescription(description);
            })

            socket.on('candidate', (socket_id, candidate) => {
                if (socket_id in peers) {
                    console.log('received candidate from ', socket_id);
                    peers[socket_id].addIceCandidate(new RTCIceCandidate(candidate));
                }
            })
        
            socket.on('remove peer', (socket_id) => {
                console.log(socket_id, ' left')
                removePeer(socket_id)
            })
            
        }

        function removePeer(socket_id) {
            if (peers[socket_id]) {
                peers[socket_id].close();
                peers[socket_id].onicecandidate = null; 
                delete peers[socket_id];
                console.log(socket_id);
                
                const highlightedItems = document.querySelectorAll("#"+socket_id);
                highlightedItems.forEach(function(userItem) {
                    userItem.remove();
                });
        }

        document.querySelector("pre").innerHTML += socket_id + ' left\n';
        }

        function addPeer(socket_id, am_initiator) {
            const peers = new RTCPeerConnection(config);

            peers.onicecandidate = event => {
                if (event.candidate) {
                console.log(socket_id, ' needs candidate');
                socket.emit('candidate', socket_id, event.candidate);
                }
            };
            
            peers.ontrack = event => {
            //if(!videos.includes(socket_id)){
                videos.push(socket_id);
                let newVid = document.createElement('video')
                newVid.srcObject = event.streams[0];
                newVid.id = socket_id
                if(marginTop==200) newVid.classList.add("remote")
                newVid.setAttribute('style','margin-top:'+marginTop+'px');
                newVid.playsinline = false
                newVid.autoplay = true
                newVid.muted = true
                newVid.play()
                document.body.appendChild(newVid)
                
                marginTop+=200;

                $('#player').append(`<a-plane id="hud_${videos[1]}" src="#${videos[1]}" shadow="receive: false" height=".5" width=".5" position="0 0 -5"></a-plane>`);
                
            //}
            };

            if (am_initiator === true) {
                peers.onnegotiationneeded = () => {
                    peers.createOffer()
                    .then(sdp => peers.setLocalDescription(sdp))
                    .then(() => { 
                    console.log('making offer to ', socket_id, peers.localDescription.type)
                    socket.emit('offer', socket_id, peers.localDescription); 
                    });
                };
            }

            return peers;
        }

    </script>
    <script src="scripts/comp-naf.js"></script>
    <script src="scripts/comp-init.js"></script>
</body>
</html>