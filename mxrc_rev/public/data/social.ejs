<!DOCTYPE html>
<head>
  <meta charset="utf-8">
  <script src="https://d3js.org/d3.v4.min.js"></script>
  <style>
    body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }
  </style>
</head>

<body>
  <script>

	// set the dimensions and margins of the graph
	var margin = {top: 20, right: 20, bottom: 30, left: 50},
      width = 660 - margin.left - margin.right,
      height = 300 - margin.top - margin.bottom;    
    
  var barWidth = 30;

  // Generate five 100 count, normal distributions with random means
  var groupCounts = {};
  var globalCounts = [];
  var meanGenerator = d3.randomUniform(10);
  var datas = [
    [0,0,0,0,0,0,0],

    [4,5,7,5.5,5,7,6],
    [4,5,5,6,5,7,6],
    [0,0,0,0,0,0,0],

    [4,6,7,6,7,5,4],
    [6,6,7,5,5,5,3],
    [0,0,0,0,0,0,0],

    [7,7,5,7,6,5,4],
    [6,7,7,5,6,3,4],
    [0,0,0,0,0,0,0],

    [6,6,7,7,7,5,6],
    [6,4,5,4,6,7,7],
    [0,0,0,0,0,0,0],

]
for(i=0; i<datas.length; i++) {
    
    var key = i.toString();
    groupCounts[key] = [];

    for(j=0; j<datas[i].length; j++) {
      var entry = datas[i][j];
      groupCounts[key].push(entry);
    }
    
}
  // Sort group counts so quantile methods work
  for(var key in groupCounts) {
    var groupCount = groupCounts[key];
    groupCounts[key] = groupCount.sort(sortNumber);
  }

  // Setup a color scale for filling each box
  var colorScale = [
    '#57BED1', 
    '#57BED1', '#EB5E58',
    '#57BED1', 
    '#57BED1', '#EB5E58',
    '#57BED1', 
    '#57BED1', '#EB5E58',
    '#D1B0B3',
    '#57BED1', '#EB5E58',
    '#D1B0B3',
    '#57BED1', '#EB5E58',
    '#D1B0B3',
    '#57BED1', '#EB5E58',
    '#D1B0B3',
    '#EDA645',
    '#EDA645',
    '#F1B1C3',
    '#F8D85E',
    '#8C99A6',
    '#ADD299',
    '#4FA490',
    '#3B7F9F',
  ];

  // Prepare the data for the box plots
  var boxPlotData = [];
  for (var [key, groupCount] of Object.entries(groupCounts)) {
    var localMin = d3.min(groupCount);
    var localMax = d3.max(groupCount);

    var obj = {};
    obj["key"] = key;
    obj["counts"] = groupCount;
    obj["quartile"] = boxQuartiles(groupCount);
    obj["whiskers"] = [localMin, localMax];
    obj["mean"] = d3.mean(groupCount);
    obj["color"] = colorScale[key];
    boxPlotData.push(obj);
  }

  // Compute an ordinal xScale for the keys in boxPlotData
  var xScale = d3.scalePoint()
    .domain(Object.keys(groupCounts))
    .rangeRound([0, width])
    .padding([0.5]);

  // Compute a global y scale based on the global counts
  var min = d3.min(globalCounts);
  var max = d3.max(globalCounts);
  var yScale = d3.scaleLinear().domain([1, 7.5]).range([height, 0]);
    
	// append the svg obgect to the body of the page
	var svg = d3.select("body").append("svg")
  	  .attr("width", width + margin.left + margin.right)
    	.attr("height", height + margin.top + margin.bottom)
	    .append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  // append a group for the box plot elements
  var g = svg.append("g");

  // Draw the box plot vertical lines
  var verticalLines = g.selectAll(".verticalLines")
    .data(boxPlotData)
    .enter()
    .append("line")
    .attr("x1", function(datum) { return xScale(datum.key); })
    .attr("y1", function(datum) { return yScale(datum.whiskers[0]); })
    .attr("x2", function(datum) { return xScale(datum.key); })
    .attr("y2", function(datum) { return yScale(datum.whiskers[1]); })
    .attr("stroke", function(datum) { return datum.color; })
    .attr("stroke-width", 1)
    .attr("fill", "none");

  // Draw the boxes of the box plot, filled and on top of vertical lines
  var rects = g.selectAll("rect")
    .data(boxPlotData)
    .enter()
    .append("rect")
    .attr("width", barWidth)
    .attr("height", function(datum) {
      var quartiles = datum.quartile;
      var height =  yScale(quartiles[0]) - yScale(quartiles[2]);      
      return height;
    })
    .attr("x", function(datum) { return xScale(datum.key) - (barWidth/2); })
    .attr("y", function(datum) { return yScale(datum.quartile[2]); })
    .attr("fill", function(datum) { return datum.color; });

  // Now render all the horizontal lines at once - the whiskers and the median
  var horizontalLineConfigs = [
    // Top whisker
    {
      x1: function(datum) { return xScale(datum.key) - barWidth/2 },
      y1: function(datum) { return yScale(datum.whiskers[0]) },
      x2: function(datum) { return xScale(datum.key) + barWidth/2 },
      y2: function(datum) { return yScale(datum.whiskers[0]) }
    },
    // Median line
    {
      x1: function(datum) { return xScale(datum.key) - barWidth/2 },
      y1: function(datum) { return yScale(datum.quartile[1]) },
      x2: function(datum) { return xScale(datum.key) + barWidth/2 },
      y2: function(datum) { return yScale(datum.quartile[1]) }
    },
    // Bottom whisker
    {
      x1: function(datum) { return xScale(datum.key) - barWidth/2 },
      y1: function(datum) { return yScale(datum.whiskers[1]) },
      x2: function(datum) { return xScale(datum.key) + barWidth/2 },
      y2: function(datum) { return yScale(datum.whiskers[1]) }
    },

    // Mean line
    {
      x1: function(datum) { return xScale(datum.key) },
      y1: function(datum) { return yScale(datum.mean) }
    },
  ];

  for(var i=0; i < horizontalLineConfigs.length; i++) {
    var lineConfig = horizontalLineConfigs[i];

    if (i==3) {
        var horizontalLine = g.selectAll(".whiskers")
        .data(boxPlotData)
        .enter()
        .append("circle")
        .attr("cx", lineConfig.x1)
        .attr("cy", lineConfig.y1)
        .attr("r", 3)
        .attr("stroke", "#000")
        .attr("stroke-width", 1)
        .attr("fill", "none");
    } else if (i==1) {
        var horizontalLine = g.selectAll(".whiskers")
        .data(boxPlotData)
        .enter()
        .append("line")
        .attr("x1", lineConfig.x1)
        .attr("y1", lineConfig.y1)
        .attr("x2", lineConfig.x2)
        .attr("y2", lineConfig.y2)
        .attr("stroke", "#fff")
        .attr("stroke-width", 1)
        .attr("fill", "none");
    } else {
        var horizontalLine = g.selectAll(".whiskers")
        .data(boxPlotData)
        .enter()
        .append("line")
        .attr("x1", lineConfig.x1)
        .attr("y1", lineConfig.y1)
        .attr("x2", lineConfig.x2)
        .attr("y2", lineConfig.y2)
        .attr("stroke", function(datum) { return datum.color; })
        .attr("stroke-width", 1)
        .attr("fill", "none");
    }
    
  }

  svg.append("g").attr("transform", "translate(0," + height + ")").call(d3.axisBottom(xScale).tickValues([]).tickSizeOuter(-height));
  svg.append("g").call(d3.axisLeft(yScale).tickValues([1, 2, 3, 4, 5, 6, 7]).tickFormat(d3.format('.0f')).tickSizeOuter(-width));
  let txts = ['copresence', 'mutual attention', 'mutual understanding', 'behaviroal engagement']
  let pos = [60, 185, 315, 442]

  for (let i = 0; i < txts.length; i++) {
    svg.append("text").text(txts[i]).attr("x", pos[i]).attr("dy", height+15).style("font-size", "12px");
  }
       

	function boxQuartiles(d) {
  	return [
    	d3.quantile(d, .25),
    	d3.quantile(d, .5),
    	d3.quantile(d, .75)
  	];
	}
    
  // Perform a numeric sort on an array
  function sortNumber(a,b) {
    return a - b;
  }

  </script>


<script>

	// set the dimensions and margins of the graph
	var margin = {top: 20, right: 20, bottom: 30, left: 50},
      width = 300 - margin.left - margin.right,
      height = 300 - margin.top - margin.bottom;    
    
  var barWidth = 30;

  // Generate five 100 count, normal distributions with random means
  var groupCounts = {};
  var globalCounts = [];
  var meanGenerator = d3.randomUniform(10);
  var datas = [

    [7,5,7,6.5,6,7,6],
    [4,5,5,6,6,7,6],
]
for(i=0; i<datas.length; i++) {
    
    var key = i.toString();
    groupCounts[key] = [];

    for(j=0; j<datas[i].length; j++) {
      var entry = datas[i][j];
      groupCounts[key].push(entry);
    }
    
}

  // Sort group counts so quantile methods work
  for(var key in groupCounts) {
    var groupCount = groupCounts[key];
    groupCounts[key] = groupCount.sort(sortNumber);
  }

  // Setup a color scale for filling each box
  var colorScale = [
    '#57BED1',
    '#EB5E58',
    '#EE7786',
    '#F1B1C3',
    '#EDA645',
    '#F8D85E',
    '#D1B0B3',
    '#8C99A6',
    '#ADD299',
    '#4FA490',
    '#3B7F9F',
  ];

  // Prepare the data for the box plots
  var boxPlotData = [];
  for (var [key, groupCount] of Object.entries(groupCounts)) {
    var localMin = d3.min(groupCount);
    var localMax = d3.max(groupCount);

    var obj = {};
    obj["key"] = key;
    obj["counts"] = groupCount;
    obj["quartile"] = boxQuartiles(groupCount);
    obj["whiskers"] = [localMin, localMax];
    obj["mean"] = d3.mean(groupCount);
    obj["color"] = colorScale[key];
    boxPlotData.push(obj);
  }

  // Compute an ordinal xScale for the keys in boxPlotData
  var xScale = d3.scalePoint()
    .domain(Object.keys(groupCounts))
    .rangeRound([0, width])
    .padding([0.5]);

  // Compute a global y scale based on the global counts
  var min = d3.min(globalCounts);
  var max = d3.max(globalCounts);
  var yScale = d3.scaleLinear().domain([1, 7.5]).range([height, 0]);
    
	// append the svg obgect to the body of the page
	var svg = d3.select("body").append("svg")
  	  .attr("width", width + margin.left + margin.right)
    	.attr("height", height + margin.top + margin.bottom)
	    .append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  // append a group for the box plot elements
  var g = svg.append("g");

  // Draw the box plot vertical lines
  var verticalLines = g.selectAll(".verticalLines")
    .data(boxPlotData)
    .enter()
    .append("line")
    .attr("x1", function(datum) { return xScale(datum.key); })
    .attr("y1", function(datum) { return yScale(datum.whiskers[0]); })
    .attr("x2", function(datum) { return xScale(datum.key); })
    .attr("y2", function(datum) { return yScale(datum.whiskers[1]); })
    .attr("stroke", function(datum) { return datum.color; })
    .attr("stroke-width", 1)
    .attr("fill", "none");

  // Draw the boxes of the box plot, filled and on top of vertical lines
  var rects = g.selectAll("rect")
    .data(boxPlotData)
    .enter()
    .append("rect")
    .attr("width", barWidth)
    .attr("height", function(datum) {
      var quartiles = datum.quartile;
      var height =  yScale(quartiles[0]) - yScale(quartiles[2]);      
      return height;
    })
    .attr("x", function(datum) { return xScale(datum.key) - (barWidth/2); })
    .attr("y", function(datum) { return yScale(datum.quartile[2]); })
    .attr("fill", function(datum) { return datum.color; });

  // Now render all the horizontal lines at once - the whiskers and the median
  var horizontalLineConfigs = [
    // Top whisker
    {
      x1: function(datum) { return xScale(datum.key) - barWidth/2 },
      y1: function(datum) { return yScale(datum.whiskers[0]) },
      x2: function(datum) { return xScale(datum.key) + barWidth/2 },
      y2: function(datum) { return yScale(datum.whiskers[0]) }
    },
    // Median line
    {
      x1: function(datum) { return xScale(datum.key) - barWidth/2 },
      y1: function(datum) { return yScale(datum.quartile[1]) },
      x2: function(datum) { return xScale(datum.key) + barWidth/2 },
      y2: function(datum) { return yScale(datum.quartile[1]) }
    },
    // Bottom whisker
    {
      x1: function(datum) { return xScale(datum.key) - barWidth/2 },
      y1: function(datum) { return yScale(datum.whiskers[1]) },
      x2: function(datum) { return xScale(datum.key) + barWidth/2 },
      y2: function(datum) { return yScale(datum.whiskers[1]) }
    },

    // Mean line
    {
      x1: function(datum) { return xScale(datum.key) },
      y1: function(datum) { return yScale(datum.mean) }
    },
  ];

  for(var i=0; i < horizontalLineConfigs.length; i++) {
    var lineConfig = horizontalLineConfigs[i];

    if (i==3) {
        var horizontalLine = g.selectAll(".whiskers")
        .data(boxPlotData)
        .enter()
        .append("circle")
        .attr("cx", lineConfig.x1)
        .attr("cy", lineConfig.y1)
        .attr("r", 3)
        .attr("stroke", "#000")
        .attr("stroke-width", 1)
        .attr("fill", "none");
    } else if (i==1) {
        var horizontalLine = g.selectAll(".whiskers")
        .data(boxPlotData)
        .enter()
        .append("line")
        .attr("x1", lineConfig.x1)
        .attr("y1", lineConfig.y1)
        .attr("x2", lineConfig.x2)
        .attr("y2", lineConfig.y2)
        .attr("stroke", "#fff")
        .attr("stroke-width", 1)
        .attr("fill", "none");
    } else {
        var horizontalLine = g.selectAll(".whiskers")
        .data(boxPlotData)
        .enter()
        .append("line")
        .attr("x1", lineConfig.x1)
        .attr("y1", lineConfig.y1)
        .attr("x2", lineConfig.x2)
        .attr("y2", lineConfig.y2)
        .attr("stroke", function(datum) { return datum.color; })
        .attr("stroke-width", 1)
        .attr("fill", "none");
    }
    
  }

  svg.append("g").attr("transform", "translate(0," + height + ")").call(d3.axisBottom(xScale).tickValues([]).tickSizeOuter(-height));
  svg.append("g").call(d3.axisLeft(yScale).tickValues([1, 2, 3, 4, 5, 6, 7]).tickFormat(d3.format('.0f')).tickSizeOuter(-width));
        
	function boxQuartiles(d) {
  	return [
    	d3.quantile(d, .25),
    	d3.quantile(d, .5),
    	d3.quantile(d, .75)
  	];
	}
    
  // Perform a numeric sort on an array
  function sortNumber(a,b) {
    return a - b;
  }

  </script>
</body>
