<html>
  <head>
    <meta charset="utf-8" />
    <title>Nametag Example — Networked-Aframe</title>
    <meta name="description" content="Tracked Controllers — Networked-Aframe" />

    <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.slim.js"></script>
    
    <script src="https://unpkg.com/networked-aframe@^0.7.1/dist/networked-aframe.min.js"></script>

    <script src="https://cdn.jsdelivr.net/gh/n5ro/aframe-extras@14411ea/dist/aframe-extras.controls.min.js"></script>
    <script src="https://unpkg.com/aframe-environment-component@1.3.2/dist/aframe-environment-component.min.js"></script>
    <script>

        // Spawn in circle
        AFRAME.registerComponent('spawn-in-circle', {
            schema: {
                radius: {type: 'number', default: 1}
            },

            init: function() {
                var el = this.el;
                var center = el.getAttribute('position');

                var angleRad = this.getRandomAngleInRadians();
                var circlePoint = this.randomPointOnCircle(this.data.radius, angleRad);
                var worldPoint = {x: circlePoint.x + center.x, y: center.y, z: circlePoint.y + center.z};
                el.setAttribute('position', worldPoint);
                // console.log('world point', worldPoint);

                var angleDeg = angleRad * 180 / Math.PI;
                var angleToCenter = -1 * angleDeg + 90;
                angleRad = THREE.MathUtils.degToRad(angleToCenter);
                el.object3D.rotation.set(0, angleRad, 0);
                // console.log('angle deg', angleDeg);
            },

            getRandomAngleInRadians: function() {
                return Math.random()*Math.PI*2;
            },

            randomPointOnCircle: function (radius, angleRad) {
                var x = Math.cos(angleRad)*radius;
                var y = Math.sin(angleRad)*radius;
                return {x: x, y: y};
            }
        });

    </script>

    <script>
      // Temporary workaround for template declaration; see issue 167
      NAF.schemas.getComponentsOriginal = NAF.schemas.getComponents;
      NAF.schemas.getComponents = (template) => {
        if (!NAF.schemas.hasTemplate('#head-template')) {
          NAF.schemas.add({
            template: '#head-template',
            components: [
              'position',
              'rotation',
              'player-info'
            ]
          });
        }

        const components = NAF.schemas.getComponentsOriginal(template);
        return components;
      };
    </script>

    <script>
      window.ntExample = {
        randomColor: () => {
          return '#' + new THREE.Color(Math.random(), Math.random(), Math.random()).getHexString();
        }
      };

      AFRAME.registerComponent('player-info', {
        schema: {
          name: { type: 'string', default: 'user-' + Math.round(Math.random() * 10000) },
          color: {
            type: 'color',
            default: window.ntExample.randomColor()
          }
        },

        init: function () {
          this.head = this.el.querySelector('.head');
          this.nametag = this.el.querySelector('.nametag');

          this.ownedByLocalUser = this.el.id === 'player';
          if (this.ownedByLocalUser) {
            // populate the html overlay with the correct name on init
            this.nametagInput = document.getElementById('username-overlay');
            this.nametagInput.value = this.data.name;

            // add the initial color to the html overlay color picker button
            document.querySelector('button').style.backgroundColor = this.data.color;
            document.querySelector('button').style.color = this.data.color;
          }
        },

        // here as an example, not used in current demo. Could build a user list, expanding on this.
        listUsers: function () {
          console.log(
            'userlist',
            [...document.querySelectorAll('[player-info]')].map((el) => el.components['player-info'].data.name)
          );
        },

        newRandomColor: function () {
          this.el.setAttribute('player-info', 'color', window.ntExample.randomColor());
        },

        update: function () {
          if (this.head) this.head.setAttribute('material', 'color', this.data.color);
          if (this.nametag) this.nametag.setAttribute('value', this.data.name);
        }
      });
    </script>
  </head>

  <body>
    <button
      id="color-changer"
      style="z-index: 100; bottom: 24px; left: 24px; position: fixed"
      onclick="let newColor = window.ntExample.randomColor();
             document.getElementById('player').setAttribute('player-info', 'color', newColor); 
             document.querySelector('button').style.backgroundColor = newColor;
             document.querySelector('button').style.color = newColor;
    "
    >
      ■
    </button>
    <input
      id="username-overlay"
      style="z-index: 100; bottom: 24px; left: 48px; position: fixed"
      oninput="document.getElementById('player').setAttribute('player-info', 'name', this.value)"
    />

    <a-scene
      networked-scene="
        room: nametag;
        debug: true;
    "
    >
      <a-assets>
        <a-asset-item id="my-head-glb" src="<%= _url %>/model/_avatars/curious_boy_green_head.glb"></a-asset-item>
        
        <template id="rig-template">
          <a-entity></a-entity>
        </template>

        <template id="head-template">
          <a-entity class="avatar" player-info>
            <a-entity class="head" gltf-model="#my-head-glb" scale="1 1 1"></a-entity>

            <!-- here we add a text component for a nametag; the value will be updated by the player-info component -->
            <a-text
              class="nametag"
              value="?"
              rotation="0 180 0"
              position=".25 -.35 0"
              side="double"
              scale=".5 .5 .5"
            ></a-text>
          </a-entity>
        </template>
      </a-assets>

      <a-entity geometry="primitive: box" position="-0.9 1 -0.9" material="color: blue"></a-entity>

      <a-entity environment="preset:forest;groundColor:#000000;"></a-entity>
      <a-entity light="type:ambient;intensity:0.5"></a-entity>

      <a-entity id="rig" movement-controls="fly:true;" spawn-in-circle="radius:3" networked="template:#rig-template;">
        <a-entity
          id="player"
          camera
          position="0 1.6 0"
          look-controls
          networked="template:#head-template;"
          visible="false"
        ></a-entity>
      </a-entity>
    </a-scene>
  </body>
</html>