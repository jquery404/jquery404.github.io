legend.direction = "horizontal",
legend.justification = c("center", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_blank()
# saving the final figure
ggsave("out/social.pdf", width = 8, height = 4, dpi = 1000)
# Convert 'conditions' column to a factor
df$conditions <- as.factor(df$conditions)
stat.test <- df %>%
group_by(params) %>%
wilcox_test(score~conditions, p.adjust.method = 'BH') %>%
add_significance("p") %>%
add_xy_position(x = "params")
bxp <- ggplot(df, aes(x = params, y = score)) +
stat_boxplot(aes(fill = conditions),
geom = "errorbar",
width = 0.2,
position = position_dodge(width = 0.75)) +
geom_boxplot(aes(fill = conditions), outlier.shape=NA) +
stat_summary(aes(fill = conditions),
fun.y="mean",
geom= "point",
shape = 4,
size = 2,
colour= "black",
position = position_dodge(width = 0.75)) +
# stat_summary(aes(fill = conditions),
#              fun="median",
#              colour= "black",
#              position = position_dodge(width = 0.75)) +
theme_bw()
bxp + stat_pvalue_manual(stat.test, label = 'p.signif', hide.ns = TRUE, tip.length = 0.02) +
scale_fill_manual(name= "conditions", values = c("#E76469", "#F8D85E","#EDA645")) +
scale_color_manual(name = "conditions", values = c("#E76469", "#F8D85E","#EDA645")) +
scale_y_continuous(minor_breaks = seq(0, 7.9, 1), breaks = seq(1, 7.9, by=1), limits=c(1,7.9)) +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.background = element_blank(),
plot.margin = unit(c(0.005, .025, 0, 0), "null"),
panel.border = element_blank(),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
#panel.grid.major = element_blank(),
legend.position="bottom",
legend.direction = "horizontal",
legend.justification = c("center", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_blank())
# saving the final figure
ggsave("out/social.pdf", width = 8, height = 4, dpi = 1000)
# Convert 'conditions' column to a factor
df$conditions <- as.factor(df$conditions)
stat.test <- df %>%
group_by(params) %>%
wilcox_test(score~conditions, p.adjust.method = 'BH') %>%
add_significance("p") %>%
add_xy_position(x = "params")
bxp <- ggplot(df, aes(x = params, y = score)) +
stat_boxplot(aes(fill = conditions),
geom = "errorbar",
width = 0.2,
position = position_dodge(width = 0.75)) +
geom_boxplot(aes(fill = conditions), outlier.shape=NA) +
stat_summary(aes(fill = conditions),
fun.y="mean",
geom= "point",
shape = 4,
size = 2,
colour= "black",
position = position_dodge(width = 0.75)) +
# stat_summary(aes(fill = conditions),
#              fun="median",
#              colour= "black",
#              position = position_dodge(width = 0.75)) +
theme_bw()
bxp + stat_pvalue_manual(stat.test, label = 'p.signif', hide.ns = TRUE, tip.length = 0.02) +
scale_fill_manual(name= "conditions", values = c("#E76469", "#F8D85E","#EDA645")) +
scale_color_manual(name = "conditions", values = c("#E76469", "#F8D85E","#EDA645")) +
scale_y_continuous(minor_breaks = seq(0, 7.9, 1), breaks = seq(1, 7.9, by=1), limits=c(1,7.9)) +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.background = element_blank(),
plot.margin = unit(c(0.005, .025, 0, 0), "null"),
panel.border = element_blank(),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
#panel.grid.major = element_blank(),
legend.position="bottom",
legend.direction = "horizontal",
legend.justification = c("center", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_blank())
# saving the final figure
ggsave("out/social.pdf", width = 8, height = 4, dpi = 1000)
library(ggplot2)
library(ggpubr)
library(rstatix)
coloring = c("#E76469", "#F8D85E","#EDA645","#D1B0B3","#8C99A6","#ADD299","#4FA490","#3B7F9F")
fontsize = 14
# Add automatically x and y positions
df=read.csv('csv/social.csv', sep=",")
test_results <- df %>%
group_by(params) %>%
wilcox_test(score ~ conditions, p.adjust.method = 'BH')
View(df)
library(ggplot2)
library(ggpubr)
library(rstatix)
coloring = c("#E76469", "#F8D85E","#EDA645","#D1B0B3","#8C99A6","#ADD299","#4FA490","#3B7F9F")
fontsize = 14
# Add automatically x and y positions
df=read.csv('csv/social.csv', sep=",")
test_results <- df %>%
group_by(params) %>%
wilcox_test(score ~ conditions, p.adjust.method = 'BH')
summary(test_results)
# Convert 'conditions' column to a factor
df$conditions <- as.factor(df$conditions)
stat.test <- df %>%
group_by(params) %>%
wilcox_test(score~conditions, p.adjust.method = 'BH') %>%
add_significance("p") %>%
add_xy_position(x = "params")
bxp <- ggplot(df, aes(x = params, y = score)) +
stat_boxplot(aes(fill = conditions),
geom = "errorbar",
width = 0.2,
position = position_dodge(width = 0.75)) +
geom_boxplot(aes(fill = conditions), outlier.shape=NA) +
stat_summary(aes(fill = conditions),
fun.y="mean",
geom= "point",
shape = 4,
size = 2,
colour= "black",
position = position_dodge(width = 0.75)) +
# stat_summary(aes(fill = conditions),
#              fun="median",
#              colour= "black",
#              position = position_dodge(width = 0.75)) +
theme_bw()
bxp + stat_pvalue_manual(stat.test, label = 'p.signif', hide.ns = TRUE, tip.length = 0.02) +
scale_fill_manual(name= "conditions", values = c("#E76469", "#F8D85E","#EDA645")) +
scale_color_manual(name = "conditions", values = c("#E76469", "#F8D85E","#EDA645")) +
scale_y_continuous(minor_breaks = seq(0, 7.9, 1), breaks = seq(1, 7.9, by=1), limits=c(1,7.9)) +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.background = element_blank(),
plot.margin = unit(c(0.005, .025, 0, 0), "null"),
panel.border = element_blank(),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
#panel.grid.major = element_blank(),
legend.position="bottom",
legend.direction = "horizontal",
legend.justification = c("center", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_blank())
# saving the final figure
ggsave("out/social.pdf", width = 8, height = 4, dpi = 1000)
# Required packages
library(ggpubr)  # https://github.com/kassambara/ggpubr
library(rstatix)  # https://github.com/kassambara/rstatix
coloring = c("#E76469", "#F8D85E","#EDA645","#D1B0B3","#8C99A6","#ADD299","#4FA490","#3B7F9F")
fontsize = 14
# Add automatically x and y positions
df=read.csv('csv/spatial.csv', sep=",")
stat.test <- df %>%
group_by(params) %>%
wilcox_test(score~conditions, p.adjust.method = 'BH') %>%
add_significance("p") %>%
add_xy_position(x = "params")
bxp <- ggplot(df, aes(x = params, y = score)) +
geom_boxplot(aes(fill = conditions), outlier.shape=NA) +
stat_summary(aes(fill = conditions),
fun.y="mean",
geom= "point",
shape = 4,
size = 2,
colour= "black",
position = position_dodge(width = 0.75)) +
theme_bw()
bxp + stat_pvalue_manual(stat.test, label = 'p.signif', hide.ns = TRUE, tip.length = 0.02) +
scale_fill_manual(name= "conditions", values = c("#E76469", "#F8D85E","#EDA645")) +
scale_color_manual(name = "conditions", values = c("#E76469", "#F8D85E","#EDA645")) +
scale_y_continuous(minor_breaks = seq(0, 7.9, 1), breaks = seq(1, 7.9, by=1), limits=c(1,7.9)) +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.background = element_blank(),
plot.margin = unit(c(0.005, .025, 0, 0), "null"),
panel.border = element_blank(),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
#panel.grid.major = element_blank(),
legend.position = c(1, 0.15),
legend.direction = "horizontal",
legend.justification = c("right", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_rect(fill = "white", color = "grey", size = 0.5))
# saving the final figure
ggsave("out/spatial.pdf", width = 8, height = 4, dpi = 1000)
# Required packages
library(ggpubr)  # https://github.com/kassambara/ggpubr
library(rstatix)  # https://github.com/kassambara/rstatix
coloring = c("#E76469", "#F8D85E","#EDA645","#D1B0B3","#8C99A6","#ADD299","#4FA490","#3B7F9F")
fontsize = 14
# Add automatically x and y positions
df=read.csv('csv/spatial.csv', sep=",")
head(df, n = 4)
# Required packages
library(ggpubr)  # https://github.com/kassambara/ggpubr
library(rstatix)  # https://github.com/kassambara/rstatix
coloring = c("#E76469", "#F8D85E","#EDA645","#D1B0B3","#8C99A6","#ADD299","#4FA490","#3B7F9F")
fontsize = 14
# Add automatically x and y positions
df=read.csv('csv/spatial.csv', sep=",")
head(df, n = 7)
# Required packages
library(ggpubr)  # https://github.com/kassambara/ggpubr
library(rstatix)  # https://github.com/kassambara/rstatix
coloring = c("#E76469", "#F8D85E","#EDA645","#D1B0B3","#8C99A6","#ADD299","#4FA490","#3B7F9F")
fontsize = 14
# Add automatically x and y positions
df=read.csv('csv/spatial.csv', sep=",")
head(df, n = 9)
stat.test <- df %>%
group_by(params) %>%
wilcox_test(score~conditions, p.adjust.method = 'BH') %>%
add_significance("p") %>%
add_xy_position(x = "params")
bxp <- ggplot(df, aes(x = params, y = score)) +
stat_boxplot(aes(fill = conditions),
geom = "errorbar",
width = 0.2,
position = position_dodge(width = 0.75)) +
geom_boxplot(aes(fill = conditions), outlier.shape=NA) +
stat_summary(aes(fill = conditions),
fun.y="mean",
geom= "point",
shape = 4,
size = 2,
colour= "black",
position = position_dodge(width = 0.75)) +
# stat_summary(aes(fill = conditions),
#              fun="median",
#              colour= "black",
#              position = position_dodge(width = 0.75)) +
theme_bw()
bxp + stat_pvalue_manual(stat.test, label = 'p.signif', hide.ns = TRUE, tip.length = 0.02) +
scale_fill_manual(name= "conditions", values = c("#E76469", "#F8D85E","#EDA645")) +
scale_color_manual(name = "conditions", values = c("#E76469", "#F8D85E","#EDA645")) +
scale_y_continuous(minor_breaks = seq(0, 7.9, 1), breaks = seq(1, 7.9, by=1), limits=c(1,7.9)) +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.background = element_blank(),
plot.margin = unit(c(0.005, .025, 0, 0), "null"),
panel.border = element_blank(),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
#panel.grid.major = element_blank(),
legend.position="bottom",
legend.direction = "horizontal",
legend.justification = c("center", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_blank())
# saving the final figure
ggsave("out/spatial.pdf", width = 8, height = 4, dpi = 1000)
# library
library(ggplot2)
library(dplyr)
library(broom)
library(tidyr)
library(stats)
coloring = c("#E76469", "#F8D85E","#EDA645","#D1B0B3","#8C99A6","#ADD299","#4FA490","#3B7F9F")
fontsize = 14
df=read.csv('csv/tlx.csv', sep=",")
summary_data <- df %>%
group_by(params, conditions) %>%
summarize(mean_score = mean(score),
se_score = qnorm(0.975) * sd(score) / sqrt(n()),
n = n()) %>%
ungroup()
# Create horizontal bar chart with error bars
order <- c('Mental',	'Physical',	'Temporal',	'Effort',	'Performance', 'Frustration', 'Overall')
ggplot(summary_data, aes(x = mean_score, y = factor(params, levels = order), fill = conditions)) +
geom_col(width=.5, position=position_dodge(.6)) +
geom_errorbar(aes(xmin=mean_score-se_score, xmax=mean_score+se_score), width=.2, position=position_dodge(.6))+
scale_fill_manual(values = coloring) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 50)) +
guides(fill=guide_legend(title="")) +
theme_bw() +
theme(axis.line = element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(color="black", size=fontsize),
axis.text.y = element_text(color="black", size=fontsize),
text = element_text(size=fontsize),
strip.background = element_blank(),
plot.background = element_blank(),
plot.margin = unit(c(0.005, .025, 0, 0), "null"),
panel.border = element_blank(),
panel.spacing = unit(c(0, 0, 0, 0), "null"),
legend.position="bottom",
legend.direction = "horizontal",
legend.justification = c("center", "top"),
legend.title=element_blank(),
legend.text=element_text(size=fontsize),
legend.box.just = "right",
legend.box.background = element_blank())
ggsave("out/rtlx.pdf", width = 6.5, height = 4.8, dpi = 1000)
data=read.csv('csv/preference.csv', sep=",")
anno <- data.frame(x1 = c(1.75, 0.75), x2 = c(2.25, 1.25),
y1 = c(36, 36), y2 = c(37, 37),
xstar = c(2, 1), ystar = c(38, 38),
lab = c("***", "**"),
region = c("q1", "q2"))
p <- ggplot(data, aes(x = conditions, y = score, fill = rank)) +
geom_bar(stat = 'identity', position = 'stack') +
coord_flip() +
theme_bw()
# Add labels to bars
p <- p + geom_text(aes(label = score), position = position_stack(vjust = 0.5), color = "black", size = 4)
p <- p + geom_text(data = anno, aes(x = xstar,  y = ystar, label = lab))
# Add facet grid
p <- p + facet_grid(rows = vars(qus), switch = "y") +
theme(strip.placement = "outside",
strip.background = element_rect(fill=coloring[3], color = NA))
# Apply the custom colors to the fill color of each factor level
p <- p + scale_fill_manual(values = coloring)
# Add theme elements
p <- p + theme(axis.title.x=element_blank(),
axis.title.y = element_blank(),
plot.margin = unit(c(0, 0, .5, 0), "null"),
panel.border = element_blank(),
legend.title=element_blank(),
legend.direction="horizontal",
legend.position = c(.5,-.05),
legend.justification = c("center", "top"))
# Show the plot
p
data=read.csv('csv/preference.csv', sep=",")
p <- ggplot(data, aes(x = conditions, y = score, fill = rank)) +
geom_bar(stat = 'identity', position = 'stack') +
coord_flip() +
theme_bw()
# Add labels to bars
p <- p + geom_text(aes(label = score), position = position_stack(vjust = 0.5), color = "black", size = 4)
# Add facet grid
p <- p + facet_grid(rows = vars(qus), switch = "y") +
# geom_signif(annotations = "*", y_position = 36.5, xmin="C1", xmax="C2") +
theme(strip.placement = "outside",
strip.background = element_rect(fill=coloring[3], color = NA))
# Apply the custom colors to the fill color of each factor level
p <- p + scale_fill_manual(values = coloring)
# Add theme elements
p <- p + theme(axis.title.x=element_blank(),
axis.title.y = element_blank(),
plot.margin = unit(c(0, 0, .5, 0), "null"),
panel.border = element_blank(),
legend.title=element_blank(),
legend.direction="horizontal",
legend.position = c(.5,-.05),
legend.justification = c("center", "top"))
# Show the plot
p
# saving the final figure
ggsave("out/preference.pdf", width = 7, height = 4, dpi = 1000)
data=read.csv('csv/preference.csv', sep=",")
p <- ggplot(data, aes(x = conditions, y = score, fill = rank)) +
geom_bar(stat = 'identity', position = 'stack') +
coord_flip() +
theme_bw()
# Add labels to bars
p <- p + geom_text(aes(label = score), position = position_stack(vjust = 0.5), color = "black", size = 4)
# Add facet grid
p <- p + facet_grid(rows = vars(qus), switch = "y") +
# geom_signif(annotations = "*", y_position = 36.5, xmin="C1", xmax="C2") +
theme(strip.placement = "outside",
strip.background = element_rect(fill=coloring[3], color = NA))
# Apply the custom colors to the fill color of each factor level
p <- p + scale_fill_manual(values = coloring)
# Add theme elements
p <- p + theme(axis.title.x=element_blank(),
axis.title.y = element_blank(),
plot.margin = unit(c(0, 0, .5, 0), "null"),
panel.border = element_blank(),
strip.text = element_text(face = "bold"),
legend.title=element_blank(),
legend.direction="horizontal",
legend.position = c(.5,-.05),
legend.justification = c("center", "top"))
# Show the plot
p
# saving the final figure
ggsave("out/preference.pdf", width = 7, height = 4, dpi = 1000)
library(ggplot2)
data=read.csv('csv/preference.csv', sep=",")
coloring <- c("red", "green", "blue", "orange", "purple")
coloring1 <- c("red", "green", "blue", "orange", "purple")
p <- ggplot(data, aes(x = conditions, y = score, fill = factor(rank))) +
geom_bar(stat = 'identity', position = 'stack') +
coord_flip() +
theme_bw()
# Add labels to bars
p <- p + geom_text(aes(label = score), position = position_stack(vjust = 0.5), color = "black", size = 4)
# Add facet grid
p <- p + facet_grid(rows = vars(qus), switch = "y") +
theme(strip.placement = "outside",
strip.background = element_rect(fill=coloring[3], color = NA))
# Apply the custom colors to the fill color of each factor level
p <- p + scale_fill_manual(values = coloring)
# Add theme elements
p <- p + theme(axis.title.x=element_blank(),
axis.title.y = element_blank(),
plot.margin = unit(c(0, 0, .5, 0), "null"),
panel.border = element_blank(),
legend.title=element_blank(),
legend.direction="horizontal",
legend.position = c(.5,-.05),
legend.justification = c("center", "top"))
# Create separate geom_text layers for asterisks for each question
geom_text_asterisk_q1 <- geom_text(data = subset(data, qus == "q1"), aes(label = "*"), x = "C1", y = max(data$score) + 5, color = "black", size = 6)
geom_text_asterisk_q1_c2 <- geom_text(data = subset(data, qus == "q1"), aes(label = "*"), x = "C2", y = max(data$score) + 5, color = "black", size = 6)
geom_text_asterisk_q2 <- geom_text(data = subset(data, qus == "q2"), aes(label = "**"), x = "C1", y = max(data$score) + 5, color = "black", size = 6)
geom_text_asterisk_q3 <- geom_text(data = subset(data, qus == "q3"), aes(label = "*"), x = "C1", y = max(data$score) + 5, color = "black", size = 6)
geom_text_asterisk_q4 <- geom_text(data = subset(data, qus == "q4"), aes(label = "***"), x = "C1", y = max(data$score) + 5, color = "black", size = 6)
# Create separate geom_text layers for asterisks for each question and condition
create_asterisk_geom <- function(q, c, y_offset) {
geom_text(data = subset(data, qus == q), aes(label = "*"), x = c, y = max(data$score[data$conditions == c & data$qus == q]) + y_offset, color = "black", size = 6)
}
# Create a function to generate geom_segment layers for each question and condition combination
create_segment_geom <- function(q, c1, c2) {
data_subset <- subset(data, qus == q)
y1 <- max(data_subset$score[data_subset$conditions == c1])
y2 <- max(data_subset$score[data_subset$conditions == c2])
geom_segment(aes(x = c1, xend = c2, y = y1, yend = y2), color = "black", linetype = "dashed")
}
conditions <- unique(data$conditions)
questions <- unique(data$qus)
y_offset <- 5
asterisk_geoms <- lapply(questions, function(q) {
lapply(conditions, function(c) {
create_asterisk_geom(q, c, y_offset)
})
})
# Create the ggplot object without the original geom_text
p <- ggplot(data, aes(x = conditions, y = score, fill = factor(rank))) +
geom_bar(stat = 'identity', position = 'stack') +
coord_flip() +
theme_bw()
# Add the separate geom_text layers for asterisks for each question
p <- p + geom_text_asterisk_q1 + geom_text_asterisk_q1_c2 + geom_text_asterisk_q2 + geom_text_asterisk_q3 + geom_text_asterisk_q4
# Add the separate geom_text layers for asterisks for each question and condition
for (q in asterisk_geoms) {
for (g in q) {
p <- p + g
}
}
# Add the separate geom_segment layers for each question and condition combination
for (q in questions) {
for (i in 1:(length(conditions) - 1)) {
for (j in (i + 1):length(conditions)) {
p <- p + create_segment_geom(q, conditions[i], conditions[j])
}
}
}
# Continue with the rest of your code
p <- p + facet_grid(rows = vars(qus), switch = "y") +
theme(strip.placement = "outside",
strip.background = element_rect(fill=coloring[3], color = NA))
p <- p + scale_fill_manual(values = coloring)
p <- p + theme(axis.title.x=element_blank(),
axis.title.y = element_blank(),
plot.margin = unit(c(0, 0, .5, 0), "null"),
panel.border = element_blank(),
legend.title=element_blank(),
legend.direction="horizontal",
legend.position = c(.5,-.05),
legend.justification = c("center", "top"))
p
